version: "3.8"

x-common-variables: &common-server-variables
  RUST_LOG: "debug"
  SERVER_CONFIG_FILE: "/app/server-config.toml"
  CLUSTER_CONFIG_FILE: "/app/cluster-config.toml"
  OMNIPAXOS_NODE_ADDRS: "s1:8000,s2:8000,s3:8000"
  OMNIPAXOS_LISTEN_ADDRESS: "0.0.0.0"
  OMNIPAXOS_LISTEN_PORT: 8000
  DATABASE_URL: "postgres://postgres:postgres@postgres:5432/omnipaxos_db"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: omnipaxos_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # OmniPaxos Servers
  s1:
    image: omnipaxos-server
    build:
      context: ./..
      dockerfile: server.dockerfile
    container_name: s1
    environment:
      <<: *common-server-variables
    volumes:
      - ./server-1-config.toml:/app/server-config.toml
      - ./cluster-config.toml:/app/cluster-config.toml
      - ./logs/:/app/logs/
    depends_on:
      postgres:
        condition: service_healthy

  s2:
    image: omnipaxos-server
    container_name: s2
    environment:
      <<: *common-server-variables
    volumes:
      - ./server-2-config.toml:/app/server-config.toml
      - ./cluster-config.toml:/app/cluster-config.toml
      - ./logs/:/app/logs/
    depends_on:
      postgres:
        condition: service_healthy

  s3:
    image: omnipaxos-server
    container_name: s3
    environment:
      <<: *common-server-variables
    volumes:
      - ./server-3-config.toml:/app/server-config.toml
      - ./cluster-config.toml:/app/cluster-config.toml
      - ./logs/:/app/logs/
    depends_on:
      postgres:
        condition: service_healthy

  # Clients for Testing Leader-based and Linearizable Reads
  test_client_leader:
    image: omnipaxos-client
    container_name: test_client_leader
    environment:
      RUST_LOG: "debug"
      CONFIG_FILE: "/app/client-test-config.toml" # Docker looks here
      OMNIPAXOS_SERVER_ADDRESS: "s1:8000" # Adjust if needed
    volumes:
      - "C:/Users/Abdul Rahman/Desktop/DS-Project Ours/DS-Project/build_scripts/client-test-config.toml:/app/client-test-config.toml" # Mount correctly
      - ./logs/:/app/logs/
    depends_on:
      - s1

  test_client_linearizable:
    image: omnipaxos-client
    container_name: test_client_linearizable
    environment:
      RUST_LOG: "debug"
      CONFIG_FILE: "/app/client-test-config.toml"
      OMNIPAXOS_SERVER_ADDRESS: "s1:8000"
      TEST_MODE: "linearizable-read" # Custom env for triggering linearizable read test
    volumes:
      - "C:/Users/Abdul Rahman/Desktop/DS-Project Ours/DS-Project/build_scripts/client-test-config.toml:/app/client-test-config.toml" # Ensure correct mounting path
      - ./logs/:/app/logs/
    depends_on:
      - s1

  # Fault Injection Service (Simulating Failure and Recovery)
  failure_injector:
    image: alpine
    container_name: failure_injector
    entrypoint: ["/bin/sh", "-c"]
    command: >
      echo "#!/bin/sh" > /failure_script.sh &&
      echo "sleep 10" >> /failure_script.sh &&
      echo "echo 'Stopping leader node (s1)...'" >> /failure_script.sh &&
      echo "docker stop s1" >> /failure_script.sh &&
      echo "sleep 10" >> /failure_script.sh &&
      echo "echo 'Restarting leader node (s1)...'" >> /failure_script.sh &&
      echo "docker start s1" >> /failure_script.sh &&
      echo "sleep 10" >> /failure_script.sh &&
      echo "echo 'Stopping follower node (s2)...'" >> /failure_script.sh &&
      echo "docker stop s2" >> /failure_script.sh &&
      echo "sleep 10" >> /failure_script.sh &&
      echo "echo 'Restarting follower node (s2)...'" >> /failure_script.sh &&
      echo "docker start s2" >> /failure_script.sh &&
      echo "echo 'Failure injection complete.'" >> /failure_script.sh &&
      chmod +x /failure_script.sh &&
      /failure_script.sh
    depends_on:
      - s1
      - s2
      - s3

  # Stress Test for Concurrency Under Load
  stress_test_client:
    image: omnipaxos-client
    container_name: stress_test_client
    environment:
      RUST_LOG: "debug"
      CONFIG_FILE: "/app/client-test-config.toml" # This must match the mounted file name
      OMNIPAXOS_SERVER_ADDRESS: "s1:8000"
      TEST_MODE: "concurrent-load"
    volumes:
      - "C:/Users/Abdul Rahman/Desktop/DS-Project Ours/DS-Project/build_scripts/client-test-config.toml:/app/client-test-config.toml"
      - ./logs/:/app/logs/
    depends_on:
      - s1

volumes:
  postgres_data:
